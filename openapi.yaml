openapi: 3.0.0
info:
  version: 1.0.0
  title: CarRental
  description: This is an API for Car Rental website
  contact:
    name: Iryna Yarka
    email: iryna.yarka@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: login
    description: User authentication
  - name: admin
    description: Deleting and adding cars to the system
  - name: passenger
    description: Browse the catalog and book a car for a certain time
  - name: car
    description: Cars to book
  - name: store
    description: Access to Carrental orders
  - name: order
    description: Order
paths:
  /login:
    post:
      tags:
      - login
      summary: User authentication, token returning
      operationId: login
      requestBody:
        description: Data for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginData'
        required: true
      responses: 
        200:
          description: Token
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /cars/car:
    post:
      tags:
        - admin
      summary: Add a new car to the rental
      operationId: appCar
      requestBody:
        description: Car object that needs to be added to the rental
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '405':
          description: Invalid input
          content: {}
      security:
        - bearer_auth: []
      x-codegen-request-body-name: body
  '/cars/car/{carId}':
    get:
      tags:
        - car
      summary: Find car by ID
      description: Returns a single car
      operationId: getCarById
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Car not found
          content: {}
      security:
        - bearer_auth: []
    put:
      tags:
        - admin
      summary: Update an exicting car
      operationId: updateCar
      parameters:
        - name: carId
          in: path
          description: ID of car to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Car object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Car not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      security:
        - bearer_auth: []
      x-codegen-request-body-name: body
    delete:
      tags:
        - admin
      summary: Deletes a car
      operationId: deleteCar
      parameters:
        - name: carId
          in: path
          description: Car id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Car not found
          content: {}
      security:
        - bearer_auth: []
  /cars:
    get:
      tags:
        - store
      summary: Returns car inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearer_auth: []
  /cars/car/{carId}/order:
    post:
      tags:
        - passenger
      summary: Place an order for a car
      operationId: placeOrder
      parameters:
      - name: carId
        in: path
        description: Car id to order
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        description: id of user who orders a car
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: order placed for booking the car
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
  '/cars/car/{carId}/order/{orderId}':
    get:
      tags:
        - order
      summary: Get booked order by ID
      operationId: getOrderById
      parameters:
        - name: carId
          in: path
          description: ID of the order that needs to get
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
             minimum: 1
             type: integer
             format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
    delete:
      tags:
        - order
      summary: Delete booked order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: carId
          in: path
          description: ID of the car
          required: true
          schema:
            type: integer
            format: int64
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
  /user:
    get:
      tags:
      - passenger
      - admin
      summary: Lists users
      description: Get the list of users
      operationId: listUsers
      parameters:
      - name: email
        in: query
        schema:
          type: string
      - name: username
        in: query
        schema:
          type: string
      responses:
        200:
          description: Users list
          content:
            applicaion/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: Error, something went wrong
          content: {}
      security:
        - bearer_auth: []
    post:
      tags:
        - passenger
        - admin
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/logout:
    get:
      tags:
        - passenger
        - admin
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  '/user/{id}':
    get:
      tags:
        - passenger
        - admin
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - passenger
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The id that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - passenger
        - admin
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        carId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        shipDate:
          type: string
          format: date-time
        returnDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        accessLevel:
          type: string
          description: Level of access
          enum:
            - admin
            - passenger
      xml:
        name: User
    Car:
      type: object
      properties:
        carId:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int64 
    LoginData:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Response:
      required:
      - code
      type: object
      properties:
        code:
          type: integer
        type:
          type: string
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
    basic_auth:
      type: http
      scheme: basic
security: [
  bearer_auth: [],
  basic_auth: []
  ]
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'localhost:5050/v1/api'
