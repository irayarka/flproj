openapi: 3.0.0
info:
   version: 1.0.0
   title: CarRental
   description: This is an API for Car Rental website
   contact:
    name: Iryna Yarka
    email: iryna.yarka@gmail.com
   license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
- name: admin
  description: Deleting and adding cars to the system
- name: passenger
  description: Browse the catalog and book a car for a certain time
- name: car
  description: Cars to book
- name: store
  description: Access to Carrental orders
paths:
  /car:
    put:
      tags:
      - admin
      summary: Update an exicting car
      operationId: updateCar
      requestBody:
        description: Car object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Car not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - carrental_auth:
        - write:cars
        - read:cars
      x-codegen-request-body-name: body
    post:
      tags:
      - admin
      summary: Add a new car to the rental
      operationId: appCar
      requestBody:
        description: Car object that needs to be added to the rental
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - carrental_auth:
        - write:cars
        - read:cars
      x-codegen-request-body-name: body
  /car/findByStatus:
    get:
      tags:
      - car
      summary: Finds cars by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findCarsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        400:
          description: Invalid status value
          content: {}
      security:
      - carrental_auth:
        - write:cars
        - read:cars
  /car/{carId}:
    get:
      tags:
      - car
      summary: Find car by ID
      description: Returns a single car
      operationId: getCarById
      parameters:
      - name: carId
        in: path
        description: ID of car to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Car not found
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - admin
      summary: Deletes a car
      operationId: deleteCar
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: carId
        in: path
        description: Car id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Car not found
          content: {}
      security:
      - carrental_auth:
        - write:pets
        - read:pets
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns car inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - passenger
      summary: Place an order for a car
      operationId: placeOrder
      requestBody:
        description: order placed for booking the car
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find book order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of car that needs to be fetched
        required: true
        schema:
          maximum: 10
          minimum: 1
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - passenger
      - admin
      summary: Delete book order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
  /user:
    post:
      tags:
      - passenger
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - passenger
      - admin
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - passenger
      - admin
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - passenger
      - admin
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - passenger
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - passenger
      - admin
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        carId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        returnDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Car:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: bmw
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: Car
  securitySchemes:
    carrental_auth:
      type: http
      scheme: bearer
    api_key:
      type: apiKey
      name: api_key
      in: header
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/irayarka/RESTlab2/1.0.0
